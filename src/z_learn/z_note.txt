进程是什么？
线程又是什么？
浏览器是多进程的？
  A、brower进程
  B、第三方插件进程
  C、GPU进程：最多一个，用于3D绘制等
  D、浏览器渲染进程（前端主要理解
    浏览器的渲染进程是多线程的
    1、GUI渲染线程
      GUI渲染线程主要负责渲染浏览器界面，解析html、css，构建DOM数，布局和绘制等
      当界面需要重绘（？）或回流（？）时，该线程就会运行
      该线程和 js引擎线程 是互斥的！两者只能跑有一个
    2、js引擎线程
      js引擎负责解析和运行js代码
      一个tab页只会有一个js线程在运行js代码
      如果js执行时间过长，会卡住GUI线程，造成页面渲染加载阻塞
    3、事件触发线程
      归属于浏览器而不属于js引擎，用来控制事件循环
      当JS引擎执行以下代码块（如setTimeout，鼠标点击，AJAX异步请求等），
      会将对应任务添加到事件线程，
      当有新的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理
      JS引擎在有空时(处理了一轮宏任务之后),会按顺序执行这个队列的事件！
    4、定时触发线程
      setTimeout和setInterval所在的线程
      因为浏览器定时计数器并不是由JS引擎线程计数的（因为JS引擎线程是单线程的，如果处于阻塞状态就会影响计时的准确性）
      因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS执行
    5、异步http请求线程
      在XMLHttpRequest连接后是通过浏览器新开一个线程请求，
      在检测到请求状态变更后，如果有设置回调函数，异步线程就将这个函数
      放到事件队列中，等待JS引擎线程的执行
  GUI线程和JS引擎线程为什么是互斥的？
    因为JS引擎线程是可以操作DOM的，如果在修改这些元素属性的同时渲染界面（即两个线程同时运行
    那么渲染线程前后获得的元素数据就可能不一致了！？
    因此为了防止渲染出线不可预期的结果，浏览器设置GUI渲染线程和JS引擎线程是互斥的，
    当JS引擎执行时GUI线程会被挂起，GUI更新则会被保存在一个队列中，等到JS引擎线程空闲时，
    再执行！！（自己猜测啊，可能是在一轮宏任务和微任务执行完毕之后，去渲染界面！）
  
  webWorker？JS的多线程？
    MDN：Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。
      也就是说，我可以通过web worker新开一个线程（具体怎么用，先不管），这个线程不能操作DOM，受控于主线程？
    JS引擎线程可以和worker线程通信（怎么通信业先不管）
    可以用来干嘛呢？ 当JS有巨量计算任务时，执行时间会比较长，那么就会卡住GUI线程，
    这样GUI线程就不能及时渲染页面，给用户造成页面卡顿延迟的感觉。
    所以有巨量计算任务的时候，可以新开一个worker线程，把巨量的计算任务放到该线程里面执行
    执行完了，再通信把结果传个主线程。这样就不会卡顿GUI线程了
  
  这里要回看一下script脚本的加载了

  
    